{"version":3,"sources":["TextBlock/TextBlock.tsx","common/format.ts","Formatter/Formatter.tsx","common/util.ts","serviceWorker.ts","index.tsx","App.tsx"],"names":["TextBlock","children","className","props","classNames","join","format","input","replace","match","Formatter","useState","setInput","output","setOutput","handleInputChange","useCallback","event","text","target","value","useEffect","placeholder","onChange","readOnly","Boolean","window","location","hostname","ReactDOM","render","href","rel","alt","src","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TAWaA,G,MAAY,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,SAAUC,EAAkC,EAAlCA,UAAcC,EAAoB,wCAChEC,EAAa,CAAC,aAAcF,GAAWG,KAAK,KAClD,OACE,4CAAUH,UAAWE,GAAgBD,GAClCF,KCXMK,EAAS,SAACC,GACrB,OAAOA,EAAMC,QACX,wCACA,SAAAC,GAAK,OAAIA,EAAQ,YCDRC,EAAY,WAAO,IAAD,EACHC,mBCN1B,qeDK6B,mBACtBJ,EADsB,KACfK,EADe,OAEDD,mBAAS,IAFR,mBAEtBE,EAFsB,KAEdC,EAFc,KAGvBC,EAAoBC,uBACxB,SAACC,GACC,IAAMC,EAAOD,EAAME,OAAOC,MAC1BR,EAASM,GACTJ,EAAUR,EAAOY,MAEnB,IAOF,OAJAG,qBAAU,WACRP,EAAUR,EAAOC,MAChB,IAGD,yBAAKL,UAAU,aACb,kBAAC,EAAD,CACEA,UAAU,aACVkB,MAAOb,EACPe,YAAa,qBACbC,SAAUR,IAEZ,kBAAC,EAAD,CACEb,UAAU,cACVoB,YAAa,kBACbF,MAAOP,EACPW,UAAQ,MEtBIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCZNoB,IAASC,OAAO,mBCCG,WACjB,OACE,yBAAK5B,UAAU,OACb,4BAAQA,UAAU,cAChB,4CACgB,IACd,uBACEA,UAAU,YACV6B,KAAK,2CACLZ,OAAO,SACPa,IAAI,uBAJN,QAQA,uBAAG9B,UAAU,eAAe6B,KAAK,+CAC/B,yBACEE,IAAI,eACJC,IAAI,iFAKZ,6BAAShC,UAAU,YACjB,kBAAC,EAAD,UDxBQ,MAASiC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.491209cc.chunk.js","sourcesContent":["import React from \"react\";\nimport { ExtendedHTMLAttributes } from \"../common/types\";\nimport \"./TextBlock.scss\";\n\nexport type IProps = ExtendedHTMLAttributes<\n  React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n  {\n    //\n  }\n>;\n\nexport const TextBlock = ({ children, className, ...props }: IProps) => {\n  const classNames = [\"text-block\", className].join(\" \");\n  return (\n    <textarea className={classNames} {...props}>\n      {children}\n    </textarea>\n  );\n};\n","/**\n * parse and format the input curl command\n * @param input original curl content\n */\nexport const format = (input: string) => {\n  return input.replace(\n    /(\\s-[A-Z]|--\\b\\w*\\b)(\\s\\'(.*?)\\')?/gm,\n    match => match + \" \\\\\\n\"\n  );\n};\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport \"./Formatter.scss\";\nimport { TextBlock } from \"../TextBlock/TextBlock\";\nimport { format } from \"../common/format\";\nimport { SAMPLE_INPUT } from \"../common/util\";\n\nexport const Formatter = () => {\n  const [input, setInput] = useState(SAMPLE_INPUT);\n  const [output, setOutput] = useState(\"\");\n  const handleInputChange = useCallback(\n    (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n      const text = event.target.value;\n      setInput(text);\n      setOutput(format(text));\n    },\n    []\n  );\n\n  useEffect(() => {\n    setOutput(format(input));\n  }, []);\n\n  return (\n    <div className=\"formatter\">\n      <TextBlock\n        className=\"curl-input\"\n        value={input}\n        placeholder={\"paste curl here...\"}\n        onChange={handleInputChange}\n      ></TextBlock>\n      <TextBlock\n        className=\"curl-output\"\n        placeholder={\"nothing here...\"}\n        value={output}\n        readOnly\n      ></TextBlock>\n    </div>\n  );\n};\n","export const SAMPLE_INPUT =\n  \"curl 'https://www.google.com/complete/search?q=curl' -H 'authority: www.google.com' -H 'pragma: no-cache' -H 'cache-control: no-cache' -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3968.0 Safari/537.36' -H 'accept: */*' -H 'sec-fetch-site: same-origin' -H 'sec-fetch-mode: cors' -H 'referer: https://www.google.com/' -H 'accept-language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-HK;q=0.6,zh-TW;q=0.5'  --compressed\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// TODO: prevent the formated curl been re-fromated\n// local storage the previous result\n\nimport React from \"react\";\nimport \"./App.scss\";\nimport { Formatter } from \"./Formatter/Formatter\";\n\nexport const App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h3>\n          format copied{\" \"}\n          <a\n            className=\"curl-link\"\n            href=\"https://curl.haxx.se/https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            curl\n          </a>\n          <a className=\"github-badge\" href=\"https://github.com/wayou/format-copied-curl\">\n            <img\n              alt=\"GitHub stars\"\n              src=\"https://img.shields.io/github/stars/wayou/format-copied-curl?style=social\"\n            ></img>\n          </a>\n        </h3>\n      </header>\n      <section className=\"App-body\">\n        <Formatter></Formatter>\n      </section>\n    </div>\n  );\n};\n"],"sourceRoot":""}